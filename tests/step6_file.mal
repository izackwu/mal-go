;; Testing that (do (do)) not broken by TCO
(do (do 1 2))
;=>2

;;
;; Testing read-string, eval and slurp
(read-string "(1 2 (3 4) nil)")
;=>(1 2 (3 4) nil)

(read-string "(+ 2 3)")
;=>(+ 2 3)

(read-string "\"\\n\"")
;=>"\n"

(read-string "7 ;; comment")
;=>7

;;; Differing output, but make sure no fatal error
(read-string ";; comment")


(eval (read-string "(+ 2 3)"))
;=>5

(slurp "./tests/helpers/test.txt")
;=>"I'm Keith Null~\n"

;;; Load the same file twice.
(slurp "./tests/helpers/test.txt")
;=>"I'm Keith Null~\n"

;; Testing load-file

(load-file "./tests/helpers/inc.mal")
;=>nil
(inc1 7)
;=>8
(inc2 7)
;=>9
(inc3 9)
;=>12

;; Testing reading of large files
(load-file "./tests/helpers/computations.mal")
;=>nil
(sumdown 2)
;=>3
(fib 2)
;=>1

;;
;; Testing that eval sets aa in root scope, and that it is found in nested scope
(let* (b 12) (do (eval (read-string "(def! aa 7)")) aa ))
;=>7

;; Testing comments in a file
(load-file "./tests/helpers/incB.mal")
;=>nil
(inc4 7)
;=>11
(inc5 7)
;=>12

;; Testing map literal across multiple lines in a file
(load-file "./tests/helpers/incC.mal")
;=>nil
mymap
;=>{"a" 1}

;; Checking that eval does not use local environments.
(def! a 1)
;=>1
(let* (a 2) (eval (read-string "a")))
;=>1

;; Non alphanumeric characters in comments in read-string
(read-string "1;!")
;=>1
(read-string "1;\"")
;=>1
(read-string "1;#")
;=>1
(read-string "1;$")
;=>1
(read-string "1;%")
;=>1
(read-string "1;'")
;=>1
(read-string "1;\\")
;=>1
(read-string "1;\\\\")
;=>1
(read-string "1;\\\\\\")
;=>1
(read-string "1;`")
;=>1
;;; Hopefully less problematic characters can be checked together
(read-string "1; &()*+,-./:;<=>?@[]^_{|}~")
;=>1

