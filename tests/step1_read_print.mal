;; Testing read of numbers
1
;=>1
7
;=>7
  7   
;=>7
-123
;=>-123

;; Testing read of nil/true/false
nil
;=>nil
true
;=>true
false
;=>false

;; Testing read of strings
"abc"
;=>"abc"
   "abc"   
;=>"abc"
"abc (with parens)"
;=>"abc (with parens)"
"abc\"def"
;=>"abc\"def"
""
;=>""
"\\"
;=>"\\"
"\\\\\\\\\\\\\\\\\\"
;=>"\\\\\\\\\\\\\\\\\\"
"&"
;=>"&"
"'"
;=>"'"
"("
;=>"("
")"
;=>")"
"*"
;=>"*"
"+"
;=>"+"
","
;=>","
"-"
;=>"-"
"/"
;=>"/"
":"
;=>":"
";"
;=>";"
"<"
;=>"<"
"="
;=>"="
">"
;=>">"
"?"
;=>"?"
"@"
;=>"@"
"["
;=>"["
"]"
;=>"]"
"^"
;=>"^"
"_"
;=>"_"
"`"
;=>"`"
"{"
;=>"{"
"}"
;=>"}"
"~"
;=>"~"

;; Testing keywords
:kw
;=>:kw

;; Testing read of vectors
[0 1 2]
;=>[0 1 2]
[]
;=>[]
[ ]
;=>[]
[[3 4]]
;=>[[3 4]]
[0 1 [0 2 3]]
;=>[0 1 [0 2 3]]
  [ 0   1   [0   2 3   ]   ]
;=>[0 1 [0 2 3]]

;; Testing read of hash maps
{}
;=>{}
{ }
;=>{}
{"abc" 1}
;=>{"abc" 1}
{"a" {"b" 2}}
;=>{"a" {"b" 2}}
{"a" {"b" {"c" 3}}}
;=>{"a" {"b" {"c" 3}}}
{  "a"  {"b"   {  "cde"     3   }  }}
;=>{"a" {"b" {"cde" 3}}}
;;; The regexp sorcery here ensures that each key goes with the correct
;;; value and that each key appears only once.
{"a1" 1 "a2" 2 "a3" 3}
;/{"a([1-3])" \1 "a(?!\1)([1-3])" \2 "a(?!\1)(?!\2)([1-3])" \3}
{  :a  {:b   {  :cde     3   }  }}
;=>{:a {:b {:cde 3}}}
{"1" 1}
;=>{"1" 1}

;; Testing read of comments
 ;; whole line comment (not an exception)
1 ; comment after expression
;=>1
1; comment after expression
;=>1

;; Non alphanumerice characters in strings
;;; \t is not specified enough to be tested
"\n"
;=>"\n"
"#"
;=>"#"
"$"
;=>"$"
"%"
;=>"%"
"."
;=>"."
"\\"
;=>"\\"
"|"
;=>"|"

;; Non alphanumeric characters in comments
1;!
;=>1
1;"
;=>1
1;#
;=>1
1;$
;=>1
1;%
;=>1
1;'
;=>1
1;\
;=>1
1;\\
;=>1
1;\\\
;=>1
1;`
;=>1
;;; Hopefully less problematic characters
1; &()*+,-./:;<=>?@[]^_{|}~
